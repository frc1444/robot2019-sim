plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "$wpiLibVersion"
}

def ROBOT_MAIN_CLASS = "com.first1444.frc.robot2019.Main"


// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}
//def includeDesktopSupport = true // this isn't used right now, but may be used later?

wpi { // remove for 2020
    opencvVersion = "3.4.4-5" // temporary fix until new WPILib release
}
dependencies {
    implementation wpi.deps.wpilib()
//    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio) // add for 2020
//    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop) // add for 2020

    implementation wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

//    simulation wpi.deps.sim.gui(wpi.platforms.desktop, false) // add for 2020
    simulation "edu.wpi.first.halsim:halsim_ds_socket:${wpi.wpilibVersion}:${wpi.platforms.desktop}@zip" // remove for 2020

    implementation "com.github.frc1444.robo-sim:wpi:$roboSimVersion"
    implementation "com.github.retrodaredevil.abstract-controller-lib:wpi:$abstractControllerLibVersion"
    implementation "com.github.frc1444.abstract-dashboard:wpi:$abstractDashboardVersion"

}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}
